@model course.Models.Post
@using Microsoft.EntityFrameworkCore
@using System.Security.Claims // Убедитесь, что эта директива присутствует для User.Identity

@{
    ViewData["Title"] = Model.Title;

    // Получаем данные из ViewData, которые были переданы из PostsController.Details
    var authorName = ViewData["AuthorName"] as string;
    var comments = ViewData["Comments"] as List<course.Models.Comment>;
    var commentAuthors = ViewData["CommentAuthors"] as Dictionary<int, string>;
    var totalPostRating = ViewData["TotalPostRating"] as int?;
    var postRatingsCount = ViewData["PostRatingsCount"] as int?;
    var commentTotalRatings = ViewData["CommentTotalRatings"] as Dictionary<int, int>;
    var commentRatingsCounts = ViewData["CommentRatingsCounts"] as Dictionary<int, int>;
    var existingPostRating = ViewData["ExistingPostRating"] as course.Models.Rating;
    var currentUserId = ViewData["CurrentUserId"] as int?; // ID текущего пользователя, если есть
    var existingCommentRatings = ViewData["ExistingCommentRatings"] as Dictionary<int, course.Models.Rating>;
    var isCurrentUserAuthor = currentUserId.HasValue && Model.IdUser == currentUserId.Value;
    var isCurrentUserAdminOrModerator = ViewData["IsUserAdminOrModerator"] as bool? ?? false; // Assuming this is passed from controller

    // Устанавливаем значения по умолчанию, если они не были вычислены (хотя контроллер должен их всегда предоставлять)
    totalPostRating ??= 0;
    postRatingsCount ??= 0;
    existingCommentRatings ??= new Dictionary<int, course.Models.Rating>(); // Инициализируем пустой словарь, если null
}

<div class="container py-4">
    <div class="text-center mb-5">
        <h1 class="section-title">@Model.Title</h1>
        <p class="hero-subtitleD mb-0">Опубликовано <strong class="text-primary">@authorName</strong> &bull; @Model.CreationDate.ToString("dd MMMM, HH:mm")</p>
        @if (Model.EditDate.HasValue)
        {
            <p class="text-muted fst-italic mt-1 mb-0">Последнее редактирование: @Model.EditDate.Value.ToString("dd MMMM, HH:mm")</p>
        }
    </div>

    <div class="card p-4 mb-5 shadow-lg">
        <div class="card-body">
            <h2 class="card-title mb-4 border-bottom pb-2">Содержание поста</h2>
            <div class="post-content-container">
                @Html.Raw(Model.Content)
            </div>

            <hr class="my-4"/>
            <div class="post-rating-section">
    <h6 class="mb-3 text-center text-muted">Оценка поста</h6>
    <div class="d-flex align-items-center justify-content-center flex-wrap gap-3 mb-3">
        @if (currentUserId.HasValue)
        {
            @* Cannot rate own post, unless the previous logic allowed it.
                This condition `!isCurrentUserAuthor` now allows rating if it's NOT the author.
                If you want to allow authors to rate their posts, remove `!isCurrentUserAuthor`. *@
            @if (!isCurrentUserAuthor)
            {
                <div id="user-post-rating-controls-@Model.IdPost" data-post-id="@Model.IdPost" class="d-flex align-items-center gap-2"> @* Added d-flex, align-items-center, gap-2 here *@
                    @if (existingPostRating == null)
                    {
                        <span class="text-muted">Ваша оценка:</span>
                        <button type="button" class="btn btn-success btn-sm vote-post-btn" data-post-id="@Model.IdPost" data-vote-type="up" title="Понравилось">
                            <i class="bi bi-hand-thumbs-up-fill me-1"></i> +1
                        </button>
                        <button type="button" class="btn btn-danger btn-sm vote-post-btn" data-post-id="@Model.IdPost" data-vote-type="down" title="Не понравилось">
                            <i class="bi bi-hand-thumbs-down-fill me-1"></i> -1
                        </button>
                    }
                    else
                    {
                        <p class="mb-0 fs-6"> @* Removed me-2 from here, added to span below *@
                            Вы уже оценили этот пост:
                            <strong class="@(existingPostRating.Value ? "text-success" : "text-danger")" id="user-post-vote-value-@Model.IdPost">
                                @(existingPostRating.Value ? "+1" : "-1")
                            </strong>
                        </p>
                        <button type="button" class="btn btn-outline-secondary btn-sm vote-post-btn" data-post-id="@Model.IdPost" data-vote-type="@(existingPostRating.Value ? "down" : "up")" title="Изменить оценку">
                            <i class="bi bi-arrow-repeat me-1"></i> Изменить
                        </button>
                    }
                </div>
            }
            else
            {
                <p class="mb-0 text-muted">Вы не можете оценить свой собственный пост.</p>
            }
        }
        else
        {
            <p class="mb-0">Чтобы оценить пост, пожалуйста, <a asp-controller="Account" asp-action="Login" class="text-decoration-none">войдите</a>.</p>
        }
    </div>

    <p class="fs-5 fw-bold text-center mb-0 d-flex justify-content-center align-items-center flex-wrap gap-2"> @* Added d-flex, justify-content-center, align-items-center, flex-wrap, gap-2 here *@
        Общий рейтинг:
        <strong id="post-total-rating-display-@Model.IdPost" class="@(totalPostRating > 0 ? "text-success" : (totalPostRating < 0 ? "text-danger" : "text-muted"))">
            @(totalPostRating > 0 ? "+" : "")@totalPostRating
        </strong>
        <span class="text-muted fs-6" id="post-ratings-count-display-@Model.IdPost">(@postRatingsCount оценок)</span> @* Removed ms-2 here, gap handles spacing *@
    </p>

    @* Dynamic messages will be handled by JavaScript *@
    <div id="post-vote-message-@Model.IdPost" class="mt-3 mb-0" style="display:none;"></div>
</div>
        </div>
    </div>

    <div class="d-flex flex-wrap gap-3 mb-5 justify-content-center">
        @if (isCurrentUserAuthor || isCurrentUserAdminOrModerator)
        {
            <a asp-action="Edit" asp-route-id="@Model.IdPost" class="btn btn-primary btn-lg custom-button-width">
                <i class="bi bi-pencil-fill me-2"></i> Редактировать
            </a>
            <a asp-action="Delete" asp-route-id="@Model.IdPost" class="btn btn-danger btn-lg custom-button-width">
                <i class="bi bi-trash-fill me-2"></i> Удалить
            </a>
        }

        @if (currentUserId.HasValue && !isCurrentUserAuthor && !isCurrentUserAdminOrModerator)
        {
            <a asp-controller="Complaints" asp-action="Create" asp-route-postId="@Model.IdPost" class="btn btn-outline-warning btn-lg custom-button-width">
                <i class="bi bi-flag-fill me-2"></i> Пожаловаться на пост
            </a>
        }
    </div>

    <hr class="my-5"/>

    <h3 class="section-title-small text-center mb-4">Комментарии (@(comments?.Count ?? 0))</h3>
    <div class="comments-section">
        @if (comments != null && comments.Any())
        {
            @foreach (var comment in comments)
            {
                var currentCommentTotalRating = commentTotalRatings != null && commentTotalRatings.ContainsKey(comment.IdComment) ? commentTotalRatings[comment.IdComment] : 0;
                var currentCommentRatingsCount = commentRatingsCounts != null && commentRatingsCounts.ContainsKey(comment.IdComment) ? commentRatingsCounts[comment.IdComment] : 0;
                var existingUserCommentRating = existingCommentRatings != null && existingCommentRatings.ContainsKey(comment.IdComment) ? existingCommentRatings[comment.IdComment] : null;
                var isCommentAuthor = currentUserId.HasValue && comment.IdUser == currentUserId.Value;

                <div class="card mb-3 shadow-sm comment-card-custom" id="comment-card-@comment.IdComment">
                    <div class="card-body">
                        <div class="d-flex justify-content-between align-items-center mb-2">
                            <h5 class="card-title mb-0">
                                @if (commentAuthors != null && commentAuthors.ContainsKey(comment.IdUser))
                                {
                                    <strong class="comment-author-name">@commentAuthors[comment.IdUser]</strong>
                                }
                                else
                                {
                                    <span class="text-muted">Неизвестный автор</span>
                                }
                                <small class="text-muted ms-2">@comment.CreationDate.ToString("dd.MM.yyyy, HH:mm")</small>
                            </h5>
                            @if (comment.EditDate.HasValue)
                            {
                                <small class="text-muted fst-italic">Отредактировано</small>
                            }
                        </div>
                        <p class="card-text comment-content-text">@comment.Content</p>

                        <div class="d-flex flex-wrap gap-2 mb-2">
                            @if (isCommentAuthor || isCurrentUserAdminOrModerator)
                            {
                                <a asp-controller="Comments" asp-action="Edit" asp-route-id="@comment.IdComment" class="btn btn-sm btn-outline-primary" title="Редактировать">
                                    <i class="bi bi-pencil-fill"></i> <span class="d-none d-md-inline">Редактировать</span>
                                </a>
                                <a asp-controller="Comments" asp-action="Delete" asp-route-id="@comment.IdComment" class="btn btn-sm btn-outline-danger" title="Удалить">
                                    <i class="bi bi-trash-fill"></i> <span class="d-none d-md-inline">Удалить</span>
                                </a>
                            }

                            @if (currentUserId.HasValue && !isCommentAuthor && !isCurrentUserAdminOrModerator)
                            {
                                <a asp-controller="Complaints" asp-action="Create" asp-route-commentId="@comment.IdComment" class="btn btn-sm btn-outline-warning ms-auto" title="Пожаловаться">
                                    <i class="bi bi-flag-fill"></i> <span class="d-none d-md-inline">Пожаловаться</span>
                                </a>
                            }
                        </div>

                        <h6 class="mt-3 mb-2 small-heading text-muted">Оценка комментария:</h6>
                        <div class="d-flex align-items-center flex-wrap gap-2">
                            @if (currentUserId.HasValue)
                            {
                                @* Cannot rate own comment *@
                                @if (!isCommentAuthor)
                                {
                                    <div id="user-comment-rating-controls-@comment.IdComment" data-comment-id="@comment.IdComment">
                                        @if (existingUserCommentRating == null)
                                        {
                                            <span class="me-2 text-muted">Ваша оценка:</span>
                                            <button type="button" class="btn btn-success btn-sm vote-comment-btn" data-comment-id="@comment.IdComment" data-vote-type="up" title="Понравилось">
                                                <i class="bi bi-hand-thumbs-up-fill"></i> +1
                                            </button>
                                            <button type="button" class="btn btn-danger btn-sm vote-comment-btn" data-comment-id="@comment.IdComment" data-vote-type="down" title="Не понравилось">
                                                <i class="bi bi-hand-thumbs-down-fill"></i> -1
                                            </button>
                                        }
                                        else
                                        {
                                            <p class="mb-0">
                                                Вы уже оценили этот комментарий:
                                                <strong class="@(existingUserCommentRating.Value ? "text-success" : "text-danger")" id="user-comment-vote-value-@comment.IdComment">
                                                    @(existingUserCommentRating.Value ? "+1" : "-1")
                                                </strong>
                                            </p>
                                            <button type="button" class="btn btn-outline-secondary btn-sm vote-comment-btn" data-comment-id="@comment.IdComment" data-vote-type="@(existingUserCommentRating.Value ? "down" : "up")" title="Изменить оценку">
                                                <i class="bi bi-arrow-repeat"></i> Изменить
                                            </button>
                                        }
                                    </div>
                                }
                                else
                                {
                                    <p class="mb-2 text-muted">Вы не можете оценить свой собственный комментарий.</p>
                                }
                            }
                            else
                            {
                                <p class="mb-2">Чтобы оценить комментарий, <a asp-controller="Account" asp-action="Login" class="text-decoration-none">войдите</a>.</p>
                            }
                        </div>

                        <p class="mt-1 mb-0 fs-5 fw-bold">
                            Рейтинг комментария:
                            <strong id="comment-total-rating-display-@comment.IdComment" class="@(currentCommentTotalRating > 0 ? "text-success" : (currentCommentTotalRating < 0 ? "text-danger" : "text-muted"))">
                                @(currentCommentTotalRating > 0 ? "+" : "")@currentCommentTotalRating
                            </strong>
                            <span class="text-muted fs-6 ms-2" id="comment-ratings-count-display-@comment.IdComment">(@currentCommentRatingsCount оценок)</span>
                        </p>
                        <div id="comment-vote-message-@comment.IdComment" class="mt-2 mb-0" style="display:none;"></div>
                    </div>
                </div>
            }
        }
        else
        {
            <p class="text-muted text-center py-3">К этому посту еще нет комментариев. Будьте первым!</p>
        }
    </div>

    <hr class="my-5"/>

    <h3 class="section-title-small text-center mb-4">Оставить комментарий</h3>
    <div class="card p-4 mb-5 shadow">
        @if (currentUserId.HasValue)
        {
            <div class="comment-form-section">
                <form asp-controller="Comments" asp-action="Create" method="post">
                    @Html.AntiForgeryToken()
                    <div asp-validation-summary="ModelOnly" class="text-danger mb-3"></div>
                    <input type="hidden" name="PostId" value="@Model.IdPost" />
                    <input type="hidden" name="IdUser" value="@currentUserId.Value" />
                    <div class="mb-3">
                        <label for="Content" class="form-label visually-hidden">Ваш комментарий</label>
                        <textarea name="Content" class="form-control" rows="5" placeholder="Напишите свой комментарий здесь..." required></textarea>
                        <span data-valmsg-for="Content" class="text-danger d-block mt-1"></span>
                    </div>
                    <div class="d-grid">
                        <button type="submit" class="btn btn-primary btn-lg">
                            <i class="bi bi-chat-dots-fill me-2"></i> Добавить комментарий
                        </button>
                    </div>
                </form>
            </div>
        }
        else
        {
            <p class="text-muted text-center mb-0">Чтобы оставить комментарий, пожалуйста, <a asp-controller="Account" asp-action="Login" class="text-decoration-none">войдите</a>.</p>
        }
    </div>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}

    <script>
        document.addEventListener('DOMContentLoaded', function () {

            // Helper to get Anti-Forgery Token
            function getAntiForgeryToken() {
                const tokenElement = document.querySelector('input[name="__RequestVerificationToken"]');
                return tokenElement ? tokenElement.value : null;
            }

            // Function to show a dynamic message (success/error)
            function showMessage(containerId, message, type = 'success') {
                const container = document.getElementById(containerId);
                if (container) {
                    container.innerHTML = `<div class="alert alert-${type} alert-dismissible fade show" role="alert">${message}<button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button></div>`;
                    container.style.display = 'block';
                    setTimeout(() => {
                        const alert = container.querySelector('.alert');
                        if (alert) {
                            new bootstrap.Alert(alert).close();
                        }
                    }, 5000); // Message disappears after 5 seconds
                }
            }

            // --- Post Voting Logic ---
            document.querySelectorAll('.vote-post-btn').forEach(button => {
                button.addEventListener('click', async function (event) {
                    const postId = this.dataset.postId;
                    const voteType = this.dataset.voteType;
                    const messageContainerId = `post-vote-message-${postId}`;

                    try {
                        const response = await fetch(`/Posts/Vote?postId=${postId}&voteType=${voteType}`, {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                                'RequestVerificationToken': getAntiForgeryToken()
                            }
                        });

                        if (!response.ok) {
                            if (response.status === 401 || response.status === 403) { // Unauthorized or Forbidden
                                const result = await response.json();
                                if (result.redirectTo) {
                                    window.location.href = result.redirectTo; // Redirect to login
                                    return;
                                }
                            }
                            throw new Error(`HTTP error! status: ${response.status}`);
                        }

                        const result = await response.json();

                        if (result.success) {
                            // Update total post rating and count
                            const totalRatingElement = document.getElementById(`post-total-rating-display-${postId}`);
                            const ratingsCountElement = document.getElementById(`post-ratings-count-display-${postId}`);

                            if (totalRatingElement) {
                                totalRatingElement.textContent = (result.newRating > 0 ? "+" : "") + result.newRating;
                                totalRatingElement.classList.remove('text-success', 'text-danger', 'text-muted');
                                if (result.newRating > 0) totalRatingElement.classList.add('text-success');
                                else if (result.newRating < 0) totalRatingElement.classList.add('text-danger');
                                else totalRatingElement.classList.add('text-muted');
                            }
                            if (ratingsCountElement) {
                                ratingsCountElement.textContent = `(${result.newRatingsCount} оценок)`;
                            }

                            // Update user's personal vote status
                            const userRatingContainer = document.getElementById(`user-post-rating-controls-${postId}`);
                            if (userRatingContainer) {
                                userRatingContainer.innerHTML = ''; // Clear existing buttons/text

                                if (result.userHasVoted) {
                                    const voteText = result.userVoteValue ? '+1' : '-1';
                                    const voteColorClass = result.userVoteValue ? 'text-success' : 'text-danger';
                                    const nextVoteType = result.userVoteValue ? 'down' : 'up'; // If current is up, next action is down

                                    userRatingContainer.innerHTML = `
                                        <p class="mb-0 fs-6 me-2">
                                            Вы уже оценили этот пост:
                                            <strong class="${voteColorClass}">${voteText}</strong>
                                        </p>
                                        <button type="button" class="btn btn-outline-secondary btn-sm vote-post-btn" data-post-id="${postId}" data-vote-type="${nextVoteType}" title="Изменить оценку">
                                            <i class="bi bi-arrow-repeat me-1"></i> Изменить
                                        </button>
                                    `;
                                } else {
                                    // No vote, show initial up/down buttons
                                    userRatingContainer.innerHTML = `
                                        <span class="me-2 text-muted">Ваша оценка:</span>
                                        <button type="button" class="btn btn-success btn-sm vote-post-btn" data-post-id="${postId}" data-vote-type="up" title="Понравилось">
                                            <i class="bi bi-hand-thumbs-up-fill me-1"></i> +1
                                        </button>
                                        <button type="button" class="btn btn-danger btn-sm vote-post-btn" data-post-id="${postId}" data-vote-type="down" title="Не понравилось">
                                            <i class="bi bi-hand-thumbs-down-fill me-1"></i> -1
                                        </button>
                                    `;
                                }
                                // Re-attach event listeners to the newly created buttons
                                userRatingContainer.querySelectorAll('.vote-post-btn').forEach(newButton => {
                                    newButton.addEventListener('click', handlePostVoteButtonClick);
                                });
                            }
                            showMessage(messageContainerId, result.message, 'success');
                        } else {
                            showMessage(messageContainerId, result.message, 'danger');
                        }
                    } catch (error) {
                        console.error('Error voting on post:', error);
                        showMessage(messageContainerId, 'Произошла ошибка при голосовании за пост. Пожалуйста, попробуйте еще раз.', 'danger');
                    }
                });
            });

            // Handle post vote button clicks (separate function for re-attaching)
            function handlePostVoteButtonClick(event) {
                const postId = this.dataset.postId;
                const voteType = this.dataset.voteType;
                const messageContainerId = `post-vote-message-${postId}`;
                // Call the original logic for voting
                document.querySelector(`.vote-post-btn[data-post-id="${postId}"][data-vote-type="${voteType}"]`).click();
            }

            // --- Comment Voting Logic ---
            document.querySelectorAll('.vote-comment-btn').forEach(button => {
                button.addEventListener('click', async function (event) {
                    const commentId = this.dataset.commentId;
                    const voteType = this.dataset.voteType;
                    const messageContainerId = `comment-vote-message-${commentId}`;

                    try {
                        const response = await fetch(`/Comments/Vote?commentId=${commentId}&voteType=${voteType}`, {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                                'RequestVerificationToken': getAntiForgeryToken()
                            }
                        });

                        if (!response.ok) {
                            if (response.status === 401 || response.status === 403) {
                                const result = await response.json();
                                if (result.redirectTo) {
                                    window.location.href = result.redirectTo;
                                    return;
                                }
                            }
                            throw new Error(`HTTP error! status: ${response.status}`);
                        }

                        const result = await response.json();

                        if (result.success) {
                            // Update total comment rating and count
                            const totalRatingElement = document.getElementById(`comment-total-rating-display-${commentId}`);
                            const ratingsCountElement = document.getElementById(`comment-ratings-count-display-${commentId}`);

                            if (totalRatingElement) {
                                totalRatingElement.textContent = (result.newRating > 0 ? "+" : "") + result.newRating;
                                totalRatingElement.classList.remove('text-success', 'text-danger', 'text-muted');
                                if (result.newRating > 0) totalRatingElement.classList.add('text-success');
                                else if (result.newRating < 0) totalRatingElement.classList.add('text-danger');
                                else totalRatingElement.classList.add('text-muted');
                            }
                            if (ratingsCountElement) {
                                ratingsCountElement.textContent = `(${result.newRatingsCount} оценок)`;
                            }

                            // Update user's personal comment vote status
                            const userRatingContainer = document.getElementById(`user-comment-rating-controls-${commentId}`);
                            if (userRatingContainer) {
                                userRatingContainer.innerHTML = ''; // Clear existing buttons/text

                                if (result.userHasVoted) {
                                    const voteText = result.userVoteValue ? '+1' : '-1';
                                    const voteColorClass = result.userVoteValue ? 'text-success' : 'text-danger';
                                    const nextVoteType = result.userVoteValue ? 'down' : 'up';

                                    userRatingContainer.innerHTML = `
                                        <p class="mb-0">
                                            Вы уже оценили этот комментарий:
                                            <strong class="${voteColorClass}">${voteText}</strong>
                                        </p>
                                        <button type="button" class="btn btn-outline-secondary btn-sm vote-comment-btn" data-comment-id="${commentId}" data-vote-type="${nextVoteType}" title="Изменить оценку">
                                            <i class="bi bi-arrow-repeat"></i> Изменить
                                        </button>
                                    `;
                                } else {
                                    userRatingContainer.innerHTML = `
                                        <span class="me-2 text-muted">Ваша оценка:</span>
                                        <button type="button" class="btn btn-success btn-sm vote-comment-btn" data-comment-id="${commentId}" data-vote-type="up" title="Понравилось">
                                            <i class="bi bi-hand-thumbs-up-fill"></i> +1
                                        </button>
                                        <button type="button" class="btn btn-danger btn-sm vote-comment-btn" data-comment-id="${commentId}" data-vote-type="down" title="Не понравилось">
                                            <i class="bi bi-hand-thumbs-down-fill"></i> -1
                                        </button>
                                    `;
                                }
                                // Re-attach event listeners to the newly created buttons
                                userRatingContainer.querySelectorAll('.vote-comment-btn').forEach(newButton => {
                                    newButton.addEventListener('click', handleCommentVoteButtonClick);
                                });
                            }
                            showMessage(messageContainerId, result.message, 'success');
                        } else {
                            showMessage(messageContainerId, result.message, 'danger');
                        }
                    } catch (error) {
                        console.error('Error voting on comment:', error);
                        showMessage(messageContainerId, 'Произошла ошибка при голосовании за комментарий. Пожалуйста, попробуйте еще раз.', 'danger');
                    }
                });
            });

            // Handle comment vote button clicks (separate function for re-attaching)
            function handleCommentVoteButtonClick(event) {
                const commentId = this.dataset.commentId;
                const voteType = this.dataset.voteType;
                const messageContainerId = `comment-vote-message-${commentId}`;
                // Call the original logic for voting
                document.querySelector(`.vote-comment-btn[data-comment-id="${commentId}"][data-vote-type="${voteType}"]`).click();
            }

            // Remove TempData messages on page load after a few seconds
            const tempAlerts = document.querySelectorAll('.alert-dismissible');
            tempAlerts.forEach(alert => {
                setTimeout(() => {
                    new bootstrap.Alert(alert).close();
                }, 5000);
            });
        });
    </script>
}