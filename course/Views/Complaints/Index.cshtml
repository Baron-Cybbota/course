@model IEnumerable<course.Models.Complaint>
@using course.Models
@using System.Security.Claims

@{
    ViewData["Title"] = "Жалобы";
    var userNames = ViewData["UserNames"] as Dictionary<int, string>;
    var allPosts = ViewData["AllPosts"] as Dictionary<int, string>;
    var allComments = ViewData["AllComments"] as Dictionary<int, string>;

    var complaintStatusDisplayName = new Dictionary<ComplaintStatus, string>
    {
        { ComplaintStatus.Pending, "Подана" },
        { ComplaintStatus.InProgress, "Рассматривается" },
        { ComplaintStatus.Resolved, "Решена" },
        { ComplaintStatus.Rejected, "Отклонена" }
    };
}

<div class="container py-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h1 class="section-title text-center mx-auto">Жалобы</h1>
    </div>

    @if (!(User.IsInRole("Модератор") || User.IsInRole("Администратор")))
    {
        <div class="mb-4 text-center">
            <a asp-action="Create" class="btn btn-gold">
                <i class="bi bi-file-earmark-plus-fill me-2"></i>Подать новую жалобу
            </a>
        </div>
    }

    <div class="table-responsive">
        <table class="table table-hover align-middle">
            <thead>
                <tr>
                    <th scope="col">
                        @Html.DisplayNameFor(model => model.IdUser)
                    </th>
                    <th scope="col">
                        Относится к
                    </th>
                    <th scope="col">
                        @Html.DisplayNameFor(model => model.Reason)
                    </th>
                    <th scope="col">
                        @Html.DisplayNameFor(model => model.Status)
                    </th>
                    <th scope="col">
                        @Html.DisplayNameFor(model => model.CreationDate)
                    </th>
                    @if (User.IsInRole("Модератор") || User.IsInRole("Администратор"))
                    {
                        <th scope="col">
                            @Html.DisplayNameFor(model => model.IdAdministrator)
                        </th>
                        <th scope="col">
                            @Html.DisplayNameFor(model => model.ResolutionDate)
                        </th>
                    }
                    <th scope="col"></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model)
                {
                    <tr class="table-row-clickable" data-href="@Url.Action("Details", new { id = item.IdComplaint })">
                        <td>
                            @if (userNames != null && userNames.ContainsKey(item.IdUser))
                            {
                                @userNames[item.IdUser]
                            }
                            else
                            {
                                <span class="text-muted">Неизвестный</span>
                            }
                        </td>
                        <td>
                            @if (item.IdPost.HasValue && allPosts != null && allPosts.ContainsKey(item.IdPost.Value))
                            {
                                <a asp-controller="Posts" asp-action="Details" asp-route-id="@item.IdPost" class="text-decoration-none">
                                    <span class="badge bg-primary me-1">Пост</span> @(allPosts[item.IdPost.Value].Length > 30 ? allPosts[item.IdPost.Value].Substring(0, 30) + "..." : allPosts[item.IdPost.Value])
                                </a>
                            }
                            else if (item.IdComment.HasValue && allComments != null && allComments.ContainsKey(item.IdComment.Value))
                            {
                                <a asp-controller="Comments" asp-action="Details" asp-route-id="@item.IdComment" class="text-decoration-none">
                                    <span class="badge bg-info text-dark me-1">Комм.</span> @(allComments[item.IdComment.Value].Length > 30 ? allComments[item.IdComment.Value].Substring(0, 30) + "..." : allComments[item.IdComment.Value])
                                </a>
                            }
                            else
                            {
                                <span class="text-muted">Неизвестно</span>
                            }
                        </td>
                        <td>
                            @(item.Reason.Length > 70 ? item.Reason.Substring(0, 70) + "..." : item.Reason)
                        </td>
                        <td>
                            @{
                                string statusClass = "";
                                switch (item.Status)
                                {
                                    case ComplaintStatus.Pending:
                                        statusClass = "badge bg-warning text-dark";
                                        break;
                                    case ComplaintStatus.InProgress:
                                        statusClass = "badge bg-primary";
                                        break;
                                    case ComplaintStatus.Resolved:
                                        statusClass = "badge bg-success";
                                        break;
                                    case ComplaintStatus.Rejected:
                                        statusClass = "badge bg-danger";
                                        break;
                                }
                            }
                            <span class="@statusClass">@complaintStatusDisplayName[item.Status]</span>
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.CreationDate)
                        </td>
                        @if (User.IsInRole("Модератор") || User.IsInRole("Администратор"))
                        {
                            <td>
                                @if (item.IdAdministrator.HasValue && userNames != null && userNames.ContainsKey(item.IdAdministrator.Value))
                                {
                                    @userNames[item.IdAdministrator.Value]
                                }
                                else
                                {
                                    <span class="text-muted">-</span>
                                }
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.ResolutionDate)
                            </td>
                        }
                        <td class="text-end">
                            @if (User.IsInRole("Модератор") || User.IsInRole("Администратор") || item.IdUser == int.Parse(User.FindFirstValue(ClaimTypes.NameIdentifier)))
                            {
                                <a asp-action="Details" asp-route-id="@item.IdComplaint" class="btn btn-sm btn-outline-info me-2" title="Детали">
                                    <i class="bi bi-info-circle-fill"></i> <span class="d-none d-lg-inline">Детали</span>
                                </a>
                                if (User.IsInRole("Модератор") || User.IsInRole("Администратор"))
                                {
                                    <a asp-action="Edit" asp-route-id="@item.IdComplaint" class="btn btn-sm btn-outline-primary me-2" title="Редактировать">
                                        <i class="bi bi-pencil-fill"></i> <span class="d-none d-lg-inline">Редактировать</span>
                                    </a>
                                    <a asp-action="Delete" asp-route-id="@item.IdComplaint" class="btn btn-sm btn-outline-danger" title="Удалить">
                                        <i class="bi bi-trash-fill"></i> <span class="d-none d-lg-inline">Удалить</span>
                                    </a>
                                }
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const applyTableTheme = (isDarkTheme) => {
                const table = document.querySelector('.table');
                if (table) {
                    if (isDarkTheme) {
                        table.classList.remove('table-light');
                        table.classList.add('table-dark');
                    } else {
                        table.classList.remove('table-dark');
                        table.classList.add('table-light');
                    }
                }
            };

            const savedTheme = localStorage.getItem('theme');
            const isDark = savedTheme === 'dark' || (savedTheme === null && window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches);
            applyTableTheme(isDark);

            const themeToggle = document.getElementById('theme-toggle');
            if (themeToggle) {
                themeToggle.addEventListener('click', function() {
                    const currentTheme = localStorage.getItem('theme');
                    applyTableTheme(currentTheme === 'dark');
                });
            }

            const tableRows = document.querySelectorAll('.table-row-clickable');
            tableRows.forEach(row => {
                row.addEventListener('click', (event) => {
                    if (!event.target.closest('a') && !event.target.closest('button')) {
                        window.location.href = row.dataset.href;
                    }
                });
                row.style.cursor = 'pointer';
            });
        });
    </script>
}