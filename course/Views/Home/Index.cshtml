@model IEnumerable<course.Models.Post>
@using course.Models
@using Microsoft.EntityFrameworkCore
@using System.Security.Claims @* Убедитесь, что эта директива присутствует для User.Identity *@

@{
    ViewData["Title"] = "Главная страница";
    var authorNames = ViewData["AuthorNames"] as Dictionary<int, string>;
    var postRatings = ViewData["PostRatings"] as Dictionary<int, int>;
    var commentCounts = ViewData["CommentCounts"] as Dictionary<int, int>;

    // Инициализация пустых словарей для безопасности, если данные не были переданы из контроллера
    postRatings ??= new Dictionary<int, int>();
    commentCounts ??= new Dictionary<int, int>();
}

@* Hero Section - Отображается только если пользователь не аутентифицирован *@
@if (!User.Identity?.IsAuthenticated ?? true)
{
    <div class="hero-section">
        <div class="hero-content">
            <h1 class="hero-title">BoardClassic</h1>
            <p class="hero-subtitle">Откройте для себя мир настольных приключений</p>
            <div class="hero-cta">
                <a asp-controller="Account" asp-action="Register" class="btn btn-gold">Начать путешествие</a> @* Перенаправление на регистрацию *@
                <a asp-controller="Home" asp-action="About" class="btn btn-outline-light">Узнать больше</a> @* Перенаправление на страницу "О нас" *@
            </div>
        </div>
    </div>
}

<div class="container mt-5">
    @* Секция подписки на новости - только для незарегистрированных пользователей *@
    @if (!User.Identity?.IsAuthenticated ?? true)
    {
        <div class="row mb-5">
            <div class="col-md-8 mx-auto">
                <div class="newsletter-box">
                    <h3>Подпишитесь на новости</h3>
                    <p>Получайте информацию о новых играх, акциях и игровых вечерах</p>
                    <form class="newsletter-form">
                        <input type="email" placeholder="Ваш email" class="form-control">
                        <button type="submit" class="btn btn-gold">Подписаться</button>
                    </form>
                </div>
            </div>
        </div>
    }

    <div class="row justify-content-center">
        <div class="col-md-10"> @* Оставил col-md-10, чтобы посты были широкими, но с небольшими отступами. Если нужно максимально широко, используйте col-md-12 *@
            <h2 class="section-title text-center mb-4">Последние посты</h2>
            <div id="postsContainer"> @* Added an ID to easily target this container with JavaScript *@
                @if (!Model.Any())
                {
                    <div class="alert alert-info text-center" role="alert">
                        Пока нет опубликованных постов. Будьте первым!
                    </div>
                }
                else
                {
                    @foreach (var post in Model)
                    {
                        // Получаем суммарный рейтинг и количество комментариев из ViewData
                        var totalPostRating = postRatings.TryGetValue(post.IdPost, out int rating) ? rating : 0; @* Corrected: post.IdPost *@
                        var commentCount = commentCounts.TryGetValue(post.IdPost, out int count) ? count : 0; @* Corrected: post.IdPost *@
                        var currentUserId = User.Identity?.IsAuthenticated == true ? User.FindFirst(ClaimTypes.NameIdentifier)?.Value : null;


                        <div class="card post-card mb-4" data-post-id="@post.IdPost"> @* Corrected: post.IdPost *@
                            <div class="d-flex align-items-start"> @* Flex container for voting and content *@
                                <div class="vote-buttons text-center px-2 py-3"> @* Voting column *@
                                    <button class="btn btn-link vote-btn vote-up-btn" data-post-id="@post.IdPost" data-vote-type="up"> @* Corrected: post.IdPost *@
                                        <i class="bi bi-arrow-up-circle-fill upvote-icon"></i> @* Added upvote-icon class *@
                                    </button>
                                    <div class="vote-score fw-bold @(totalPostRating > 0 ? "text-success" : (totalPostRating < 0 ? "text-danger" : "text-muted"))">
                                        @(totalPostRating > 0 ? "+" : "")@totalPostRating
                                    </div>
                                    <button class="btn btn-link vote-btn vote-down-btn" data-post-id="@post.IdPost" data-vote-type="down"> @* Corrected: post.IdPost *@
                                        <i class="bi bi-arrow-down-circle-fill downvote-icon"></i> @* Added downvote-icon class *@
                                    </button>
                                </div>
                                <div class="card-body"> @* Post content column *@
                                    <a asp-controller="Posts" asp-action="Details" asp-route-id="@post.IdPost" class="text-decoration-none text-dark"> @* Corrected: post.IdPost *@
                                        <h3 class="card-title post-title">
                                            @Html.DisplayFor(modelItem => post.Title)
                                        </h3>
                                    </a>
                                    <div class="post-meta mb-3">
                                        <i class="bi bi-person-circle"></i>
                                        Опубликовано:
                                        @if (authorNames != null && authorNames.ContainsKey(post.IdUser)) @* Corrected: post.IdUser *@
                                        {
                                            <a asp-controller="Users" asp-action="Details" asp-route-id="@post.IdUser" class="post-author"> @* Corrected: post.IdUser *@
                                                <strong>@authorNames[post.IdUser]</strong> @* Corrected: post.IdUser *@
                                            </a>
                                        }
                                        else
                                        {
                                            <strong class="post-author">Неизвестный автор</strong>
                                        }
                                        <span class="post-date">(от @post.CreationDate.ToString("dd.MM.yyyy в HH:mm"))</span>

                                        @if (post.EditDate.HasValue) @* Corrected: post.LastEditDate *@
                                        {
                                            <br />
                                            <small class="post-edited-info">
                                                <i class="bi bi-pencil-square"></i> Изменено: @post.EditDate.Value.ToString("dd.MM.yyyy в HH:mm") @* Corrected: post.LastEditDate *@
                                            </small>
                                        }
                                    </div>
                                    <a asp-controller="Posts" asp-action="Details" asp-route-id="@post.IdPost" class="text-decoration-none text-dark"> @* Corrected: post.IdPost *@
                                        <p class="card-text post-content">@Html.Raw(post.Content.Length > 1089 ? post.Content.Substring(0, 1089) + "..." : post.Content)</p>
                                    </a>
                                    <div class="d-flex justify-content-between align-items-center mt-4">
                                        <small class="post-stats">
                                            <a asp-controller="Posts" asp-action="Details" asp-route-id="@post.IdPost" class="text-decoration-none text-muted"> @* Corrected: post.IdPost *@
                                                <i class="bi bi-chat-dots-fill me-1" style="font-size: 1.3rem;"></i> @commentCount 
                                            </a>
                                        </small>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                }
            </div>
            <div id="loadingIndicator" class="text-center my-4" style="display: none;">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Загрузка...</span>
                </div>
                <p class="mt-2">Загрузка постов...</p>
            </div>
            <div id="endOfPosts" class="text-center my-4" style="display: none;">
                <p class="text-muted">Все посты загружены.</p>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        let pageNumber = 2; // Start with the first page
        const pageSize = 25; // Number of posts per load
        let isLoading = false;
        let allPostsLoaded = false;

        const postsContainer = document.getElementById('postsContainer');
        const loadingIndicator = document.getElementById('loadingIndicator');
        const endOfPosts = document.getElementById('endOfPosts');

        // Function to load more posts
        async function loadMorePosts() {
            if (isLoading || allPostsLoaded) {
                return;
            }

            isLoading = true;
            loadingIndicator.style.display = 'block'; // Show loading indicator

            try {
                // Fetch posts from your controller action
                const response = await fetch(`/Posts/GetMorePosts?pageNumber=${pageNumber}&pageSize=${pageSize}`);
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                const newPostsHtml = await response.text();

                if (newPostsHtml.trim() === '') {
                    // No more posts to load
                    allPostsLoaded = true;
                    endOfPosts.style.display = 'block'; // Show "All posts loaded" message
                } else {
                    postsContainer.insertAdjacentHTML('beforeend', newPostsHtml);
                    pageNumber++;
                    attachVoteButtonListeners(); // Re-attach listeners for new posts
                }
            } catch (error) {
                console.error('Error loading more posts:', error);
                // Optionally, display an error message to the user
            } finally {
                isLoading = false;
                loadingIndicator.style.display = 'none'; // Hide loading indicator
            }
        }

        // Scroll event listener
        window.addEventListener('scroll', () => {
            // Check if the user has scrolled to the bottom of the page
            if (window.innerHeight + window.scrollY >= document.body.offsetHeight - 100) { // -100 for a small buffer
                loadMorePosts();
            }
        });

        // Function to handle voting
        async function handleVote(postId, voteType) {
            // Check if user is authenticated
            const isAuthenticated = @(User.Identity?.IsAuthenticated == true ? "true" : "false");
            if (!isAuthenticated) {
                window.location.href = '/Account/Login'; // Redirect to login page
                return;
            }

            try {
                // IMPORTANT: Ensure your server-side Vote action expects 'postId' (lowercase 'i')
                // If your controller expects 'IdPost', you might need to adjust the parameter name in the fetch URL or the controller action itself.
                const response = await fetch(`/Posts/Vote?postId=${postId}&voteType=${voteType}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': getAntiForgeryToken() // Include anti-forgery token
                    }
                });

                if (response.ok) {
                    const result = await response.json();
                    if (result.success) {
                        // Update the vote score on the UI
                        // Using the data-post-id on the .post-card to find the specific post
                        const postCard = document.querySelector(`.post-card[data-post-id="${postId}"]`);
                        if (postCard) {
                            const voteScoreElement = postCard.querySelector('.vote-score');
                            if (voteScoreElement) {
                                voteScoreElement.textContent = (result.newRating > 0 ? "+" : "") + result.newRating;
                                // Update color based on new rating
                                voteScoreElement.classList.remove('text-success', 'text-danger', 'text-muted');
                                if (result.newRating > 0) {
                                    voteScoreElement.classList.add('text-success');
                                } else if (result.newRating < 0) {
                                    voteScoreElement.classList.add('text-danger');
                                } else {
                                    voteScoreElement.classList.add('text-muted');
                                }
                            }
                        }
                    } else {
                        alert(result.message); // Display error message from server
                    }
                } else {
                    alert('Ошибка при отправке голоса. Пожалуйста, попробуйте еще раз.');
                }
            } catch (error) {
                console.error('Error voting:', error);
                alert('Произошла ошибка. Пожалуйста, попробуйте еще раз.');
            }
        }

        // Helper to get Anti-Forgery Token
        function getAntiForgeryToken() {
            // Ensure you have an anti-forgery token input field in your form or layout
            // For example, in your _Layout.cshtml or directly in this view within a form:
            // @Html.AntiForgeryToken()
            const tokenElement = document.querySelector('input[name="__RequestVerificationToken"]');
            return tokenElement ? tokenElement.value : null;
        }

        // Attach event listeners to vote buttons
        function attachVoteButtonListeners() {
            document.querySelectorAll('.vote-btn').forEach(button => {
                button.removeEventListener('click', handleVoteButtonClick); // Remove existing to prevent duplicates
                button.addEventListener('click', handleVoteButtonClick);
            });
        }

        function handleVoteButtonClick(event) {
            const postId = this.dataset.postId;
            const voteType = this.dataset.voteType;
            handleVote(postId, voteType);
        }

        // Initial attachment of listeners
        document.addEventListener('DOMContentLoaded', attachVoteButtonListeners);
    </script>
}

<style>
    /* Custom styles for voting buttons */
    .vote-buttons {
        display: flex;
        flex-direction: column;
        align-items: center;
        padding: 10px;
        background-color: var(--light-bg); /* Or specific color for light theme */
        border-right: 1px solid rgba(0, 0, 0, 0.05);
        border-top-left-radius: 0.5rem;
        border-bottom-left-radius: 0.5rem;
        min-width: 50px; /* Adjust as needed */
    }

    .vote-btn {
        font-size: 2rem; /* Larger icons */
        padding: 0;
        line-height: 1;
        transition: color 0.2s ease, transform 0.2s ease;
        margin: 0;
        display: flex;
        align-items: center;
        justify-content: center;
        border: none;
        background: transparent;
    }

    /* Specific colors for upvote and downvote icons */
    .upvote-icon {
        color: green; /* Green for upvote */
    }

    .downvote-icon {
        color: red; /* Red for downvote */
    }

    .vote-btn:hover .upvote-icon {
        color: #008000; /* Slightly darker green on hover */
        transform: scale(1.1);
    }

    .vote-btn:hover .downvote-icon {
        color: #CC0000; /* Slightly darker red on hover */
        transform: scale(1.1);
    }


    .vote-btn:active {
        transform: scale(0.95);
    }

    .vote-score {
        font-size: 1.2rem;
        margin: 5px 0;
        /* The color is now controlled by JavaScript classes (text-success, text-danger, text-muted) */
    }

    /* Adjust card-body to align with voting buttons */
    .card-body {
        flex-grow: 1;
        padding-left: 1.5rem; /* Add some padding to the left of the content */
    }

    /* Ensure card is a flex container */
    .card.post-card {
        display: flex;
        flex-direction: row; /* Arrange voting and content side-by-side */
    }

    /* Styles for dark theme */
    body.dark-theme .vote-buttons {
        background-color: var(--dark-theme-card-bg);
        border-right-color: var(--dark-theme-border);
    }

    /* For dark theme, maintain fixed green/red for icons, but adjust hover if needed */
    body.dark-theme .upvote-icon {
        color: #4CAF50; /* Slightly brighter green for dark theme */
    }

    body.dark-theme .downvote-icon {
        color: #F44336; /* Slightly brighter red for dark theme */
    }

    body.dark-theme .vote-btn:hover .upvote-icon {
        color: #66BB6A;
    }

    body.dark-theme .vote-btn:hover .downvote-icon {
        color: #EF5350;
    }

    body.dark-theme .vote-score {
        color: var(--dark-theme-text) !important; /* Ensure score color is consistent, JS handles specific text-success/danger */
    }

    /* Style for clickable text elements */
    .card-title.post-title,
    .card-text.post-content {
        cursor: pointer; /* Indicate that these are clickable */
        transition: color 0.2s ease;
    }

    .card-title.post-title:hover,
    .card-text.post-content:hover {
        color: var(--primary-dark); /* Slightly darker on hover for light theme */
    }

    body.dark-theme .card-title.post-title:hover,
    body.dark-theme .card-text.post-content:hover {
        color: var(--accent-teal); /* Highlight on hover for dark theme */
    }

    /* Remove default button styles for links */
    .text-decoration-none {
        text-decoration: none !important;
    }

    .text-dark {
        color: var(--text-dark) !important;
    }

    body.dark-theme .text-dark {
        color: var(--dark-theme-text) !important;
    }

    .bi-chat-dots-fill {
        transition: color 0.2s ease;
    }

    .bi-chat-dots-fill:hover {
        color: var(--accent-teal) !important;
    }
</style>