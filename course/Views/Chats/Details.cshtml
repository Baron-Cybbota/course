@model course.Models.Chat
@using System.Security.Claims
@using course.Models

@{
    ViewData["Title"] = Model.Name;
    var isCurrentUserParticipant = (bool)ViewData["IsCurrentUserParticipant"];
}

<h1>@Model.Name</h1>

<div>
    <h4>Чат</h4>
    <hr />
    <dl class="row">
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Name)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Name)
        </dd>
        <dt class="col-sm-2">
            Создатель
        </dt>
        <dd class="col-sm-10">
            @if (ViewData["CreatorName"] != null)
            {
                <span>@ViewData["CreatorName"]</span>
            }
            else
            {
                <span>Неизвестный создатель</span>
            }
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.CreationDate)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.CreationDate)
        </dd>
    </dl>
</div>
<div>
    <a asp-action="Edit" asp-route-id="@Model.Id">Редактировать</a> |
    <a asp-action="Index">Вернуться к списку чатов</a>
</div>

---

<h3 class="mt-4">Участники чата</h3>
<div class="participants-section mb-3">
    @{
        var participants = ViewData["Participants"] as List<ChatParticipant>;
        var participantNames = ViewData["ParticipantNames"] as Dictionary<int, string>;
    }
    @if (participants != null && participants.Any())
    {
        <ul>
            @foreach (var participant in participants)
            {
                <li>
                    @if (participantNames != null && participantNames.ContainsKey(participant.UserId))
                    {
                        <span>@participantNames[participant.UserId]</span>
                    }
                    else
                    {
                        <span>Неизвестный пользователь</span>
                    }
                    <small class="text-muted">(Присоединился: @participant.JoinDate.ToShortDateString())</small>

                    @* Option to remove participant for moderators/admins (excluding themselves) *@
                    @if (User.Identity.IsAuthenticated && (User.IsInRole("Модератор") || User.IsInRole("Администратор")) && participant.UserId.ToString() != User.FindFirstValue(ClaimTypes.NameIdentifier))
                    {
                        <form asp-controller="ChatParticipants" asp-action="RemoveParticipant" method="post" style="display:inline;" onsubmit="return confirm('Вы уверены, что хотите удалить этого участника из чата?');">
                            <input type="hidden" name="chatId" value="@Model.Id" />
                            <input type="hidden" name="userId" value="@participant.UserId" />
                            <button type="submit" class="btn btn-danger btn-sm ms-2">Удалить</button>
                        </form>
                    }
                </li>
            }
        </ul>
    }
    else
    {
        <p>В этом чате пока нет участников, кроме создателя.</p>
    }

    @if (User.Identity.IsAuthenticated)
    {
        if (isCurrentUserParticipant)
        {
            <form asp-controller="ChatParticipants" asp-action="LeaveChat" method="post" onsubmit="return confirm('Вы уверены, что хотите покинуть этот чат?');">
                <input type="hidden" name="chatId" value="@Model.Id" />
                <button type="submit" class="btn btn-warning mt-2">Покинуть чат</button>
            </form>
        }
        else
        {
            <form asp-controller="ChatParticipants" asp-action="JoinChat" method="post">
                <input type="hidden" name="chatId" value="@Model.Id" />
                <button type="submit" class="btn btn-success mt-2">Присоединиться к чату</button>
            </form>
        }
    }
</div>

---

<h3 class="mt-4">Сообщения</h3>
<div class="messages-section" style="max-height: 400px; overflow-y: auto; border: 1px solid #ddd; padding: 10px;">
    @{
        var messages = ViewData["Messages"] as List<ChatMessage>;
        var messageSenders = ViewData["MessageSenders"] as Dictionary<int, string>;
    }

    @if (messages != null && messages.Any())
    {
        @foreach (var message in messages)
        {
            <div class="card mb-2">
                <div class="card-body">
                    <h6 class="card-subtitle mb-2 text-muted">
                        @if (messageSenders != null && messageSenders.ContainsKey(message.SenderId))
                        {
                            <span>@messageSenders[message.SenderId]</span>
                        }
                        else
                        {
                            <span>Неизвестный отправитель</span>
                        }
                        <small> - @message.SentDate.ToString("dd.MM.yyyy HH:mm")</small>
                        @if (message.IsRead)
                        {
                            <span class="badge bg-success float-end">Прочитано</span>
                        }
                        else
                        {
                            <span class="badge bg-info float-end">Не прочитано</span>
                        }
                    </h6>
                    <p class="card-text">@message.Content</p>
                    @if (User.Identity.IsAuthenticated && User.IsInRole("Модератор"))
                    {
                        <a asp-controller="Messages" asp-action="Delete" asp-route-id="@message.Id" class="btn btn-sm btn-outline-danger">Удалить сообщение</a>
                    }
                </div>
            </div>
        }
    }
    else
    {
        <p>В этом чате пока нет сообщений.</p>
    }
</div>

---

<h3 class="mt-4">Отправить сообщение</h3>
@if (User.Identity.IsAuthenticated)
{
    // Only allow sending messages if the user is a participant
    if (isCurrentUserParticipant)
    {
        <div class="message-form-section">
            <form asp-controller="Messages" asp-action="Create" method="post">
                @Html.AntiForgeryToken()
                <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                <input type="hidden" name="ChatId" value="@Model.Id" />
                <div class="form-group">
                    <label for="Content" class="control-label">Ваше сообщение</label>
                    <textarea name="Content" class="form-control" rows="3" required></textarea>
                    <span data-valmsg-for="Content" class="text-danger"></span>
                </div>
                <div class="form-group mt-2">
                    <input type="submit" value="Отправить" class="btn btn-primary" />
                </div>
            </form>
        </div>
    }
    else
    {
        <p>Вы должны быть участником чата, чтобы отправлять сообщения.</p>
    }
}
else
{
    <p>Чтобы отправить сообщение, пожалуйста, <a asp-area="Identity" asp-page="/Account/Login">войдите</a>.</p>
}

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}