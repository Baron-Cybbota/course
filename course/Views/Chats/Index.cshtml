@model IEnumerable<course.Models.Chat>
@using course.Models

@{
    ViewData["Title"] = "Чаты";
    // Получаем словарь создателей, переданный из контроллера
    var creatorsDictionary = ViewData["Creators"] as Dictionary<int, string>;
}

<div class="container py-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h1 class="section-title text-center mx-auto">Список чатов</h1>
    </div>

    <div class="mb-4 text-center">
        <a asp-action="Create" class="btn btn-gold">
            <i class="bi bi-plus-circle-fill me-2"></i>Создать новый чат
        </a>
    </div>

    <div class="table-responsive">
        <table class="table table-hover align-middle">
            <thead>
                <tr>
                    <th scope="col">
                        @Html.DisplayNameFor(model => model.Name)
                    </th>
                    <th scope="col">
                        Создатель
                    </th>
                    <th scope="col">
                        @Html.DisplayNameFor(model => model.CreationDate)
                    </th>
                    <th scope="col"></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model)
                {
                    <tr class="table-row-clickable" data-href="@Url.Action("Details", new { id = item.Id })">
                        <td>
                            @Html.DisplayFor(modelItem => item.Name)
                        </td>
                        <td>
                            @{
                                // Безопасное получение имени создателя из словаря
                                if (creatorsDictionary != null && creatorsDictionary.TryGetValue(item.CreatorId, out string creatorName))
                                {
                                    @creatorName
                                }
                                else
                                {
                                    <span class="text-muted">Неизвестный</span>
                                }
                            }
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.CreationDate)
                        </td>
                        <td class="text-end">
                            <a asp-action="Edit" asp-route-id="@item.Id" class="btn btn-sm btn-outline-primary me-2">
                                <i class="bi bi-pencil-fill"></i> Редактировать
                            </a>
                            <a asp-action="Details" asp-route-id="@item.Id" class="btn btn-sm btn-outline-info me-2">
                                <i class="bi bi-info-circle-fill"></i> Детали
                            </a>
                            <a asp-action="Delete" asp-route-id="@item.Id" class="btn btn-sm btn-outline-danger">
                                <i class="bi bi-trash-fill"></i> Удалить
                            </a>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            // Применяем стили таблицы в зависимости от темы
            const applyTableTheme = (isDarkTheme) => {
                const table = document.querySelector('.table');
                if (table) {
                    if (isDarkTheme) {
                        table.classList.remove('table-light');
                        table.classList.add('table-dark');
                    } else {
                        table.classList.remove('table-dark');
                        table.classList.add('table-light');
                    }
                }
            };

            // Инициализация темы таблицы при загрузке страницы
            const savedTheme = localStorage.getItem('theme');
            const isDark = savedTheme === 'dark' || (savedTheme === null && window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches);
            applyTableTheme(isDark);

            // Обработчик изменения темы
            const themeToggle = document.getElementById('theme-toggle'); // Предполагается, что у вас есть такая кнопка на _Layout
            if (themeToggle) {
                themeToggle.addEventListener('click', function() {
                    const currentTheme = localStorage.getItem('theme');
                    applyTableTheme(currentTheme === 'dark'); // localStorage уже обновлен в _Layout.cshtml
                });
            }

            // Делаем строки таблицы кликабельными (для перехода к деталям)
            const tableRows = document.querySelectorAll('.table-row-clickable');
            tableRows.forEach(row => {
                row.addEventListener('click', (event) => {
                    // Предотвращаем срабатывание, если клик был по одной из кнопок внутри строки
                    if (!event.target.closest('a')) {
                        window.location.href = row.dataset.href;
                    }
                });
                // Изменяем курсор при наведении
                row.style.cursor = 'pointer';
            });
        });
    </script>
}